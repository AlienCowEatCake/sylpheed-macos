From 06a7327d110bbafbd8cd4c830e1efba530dc6d19 Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Sat, 18 Jun 2022 01:38:20 +0700
Subject: [PATCH 11/19] join encoded multibyte headers splited not on character
 boundary

================================================================================

https://www.sraoss.jp/pipermail/sylpheed/2019-October/006809.html

[sylpheed:36863] [PATCH] join encoded multibyte headers splited not on character boundary

Sergey Pinaev dfo at antex.ru
Thu Oct 31 21:16:18 JST 2019

hi.
some very "smart" MUAs (outlook, i guess) sometimes
split multibyte (i.e. UTF-8) headers not on character
boundary before base64 (or qp) encode then. so, when decoded,
character on which header is splited will be lost. attached
patch joins decoded header lines (with same charset) before
converting them from specifed charset to utf-8.

--
mail="Sergey Pinaev <dfo at antex.ru>"
url="http://`echo $mail | sed 's/.* <\(.*\)@\(.*\)>/\1.\2/'`"
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sylpheed-utfsplited.patch
Type: text/x-diff
Size: 4831 bytes
Desc: not available
URL: <http://www.sraoss.jp/pipermail/sylpheed/attachments/20191031/52570c0b/attachment.bin>

================================================================================

https://github.com/AlienCowEatCake/sylpheed-macos/issues/2#issuecomment-1157029378

This patch breaks decoding attachment filenames in some cases.

Example (gmail, encoded_str in unmime_header):
=?UTF-8?B?0JbQuNCz0LDQu9C+0LIg0J8u0KEu?= - =?UTF-8?B?0JfQsNC/?= =?UTF-8?B?0L7Qu9C90LXQvdC90YvQtSDQtNC+0LrRg9C80LXQvdGC0YsucGRm?=

Also, example of header with original issue (encoded_str in unmime_header):
=?utf-8?B?0KHQutC40LTQutC4INC00L4gNzAlINC00LvRjyDQsNC60YPQuyDRiNC+0L/Q?= =?utf-8?B?uNC90LPQsCE=?=

================================================================================

https://github.com/AlienCowEatCake/sylpheed-macos/issues/2#issuecomment-1159133506

It seems that this patch fixes original patch (fixes memory leak also):
```
ZGlmZiAtLWdpdCBhL2xpYnN5bHBoL3VubWltZS5jIGIvbGlic3lscGgvdW5taW1lLmMKaW5k
ZXggNWQ1OWRiOS4uMTFlNjI1ZiAxMDA2NDQKLS0tIGEvbGlic3lscGgvdW5taW1lLmMKKysr
IGIvbGlic3lscGgvdW5taW1lLmMKQEAgLTEwNSw2ICsxMDUsMTMgQEAgZ2NoYXIgKnVubWlt
ZV9oZWFkZXIoY29uc3QgZ2NoYXIgKmVuY29kZWRfc3RyKQogCiAgICAgICAgICAgICAgICAg
ICAgICAgIGZvciAoc3AgPSBwOyBzcCA8IGV3b3JkX2JlZ2luX3A7IHNwKyspIHsKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdfYXNjaWlfaXNzcGFjZSgqc3ApKSB7
CisKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0X3N0
cihkZWNvZGVkX3RleHQsIGN1cl9jaGFyc2V0LCBvdXRidWYpOworICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29kZWRfdGV4dCA9IE5VTEw7CisgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjb2RlZF90ZXh0X2xlbiA9IDA7
CisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ19mcmVlKGN1cl9j
aGFyc2V0KTsKKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJf
Y2hhcnNldCA9IE5VTEw7CisKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIGdfc3RyaW5nX2FwcGVuZF9sZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgKG91dGJ1ZiwgcCwgZXdvcmRfYmVnaW5fcCAtIHApOwogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGV3b3JkX2JlZ2luX3A7
CkBAIC0xNTEsNiArMTU4LDcgQEAgZ2NoYXIgKnVubWltZV9oZWFkZXIoY29uc3QgZ2NoYXIg
KmVuY29kZWRfc3RyKQogICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydF9zdHIoZGVj
b2RlZF90ZXh0LCBjdXJfY2hhcnNldCwgb3V0YnVmKTsKICAgICAgICAgICAgICAgICAgICAg
ICAgIGRlY29kZWRfdGV4dCA9IE5VTEw7CiAgICAgICAgICAgICAgICAgICAgICAgICBkZWNv
ZGVkX3RleHRfbGVuID0gMDsKKyAgICAgICAgICAgICAgICAgICAgICAgIGdfZnJlZShjdXJf
Y2hhcnNldCk7CiAgICAgICAgICAgICAgICAgICAgICAgICBjdXJfY2hhcnNldCA9IE5VTEw7
CiAgICAgICAgICAgICAgICAgICAgICAgIGdfc3RyaW5nX2FwcGVuZF9sZW4ob3V0YnVmLCBw
LCBld29yZF9lbmRfcCArIDIgLSBwKTsKICAgICAgICAgICAgICAgICB9Cg==
```

================================================================================
---
 libsylph/unmime.c | 91 ++++++++++++++++++++++++++++++++++-------------
 1 file changed, 67 insertions(+), 24 deletions(-)

diff --git a/libsylph/unmime.c b/libsylph/unmime.c
index 34a3d73..97bd08e 100644
--- a/libsylph/unmime.c
+++ b/libsylph/unmime.c
@@ -34,41 +34,63 @@
 
 /* Decodes headers based on RFC2045 and RFC2047. */
 
+void convert_str(gchar *decoded_text, gchar *charset, GString *outbuf) {
+        if(charset != NULL && decoded_text != NULL) {
+                gchar *conv_str = conv_codeset_strdup(decoded_text, charset, NULL);
+
+		if (!conv_str)
+			conv_str = conv_utf8todisp(decoded_text, NULL);
+		g_string_append(outbuf, conv_str);
+		g_free(conv_str);
+                g_free(decoded_text);
+        }
+}
+
 gchar *unmime_header(const gchar *encoded_str)
 {
 	const gchar *p = encoded_str;
 	const gchar *eword_begin_p, *encoding_begin_p, *text_begin_p,
 		    *eword_end_p;
 	gchar charset[32];
+        char *cur_charset = NULL;
 	gchar encoding;
 	gchar *conv_str;
 	GString *outbuf;
 	gchar *out_str;
 	gsize out_len;
+        gchar *decoded_text = NULL;
+        gint decoded_text_len = 0;
 
 	outbuf = g_string_sized_new(strlen(encoded_str) * 2);
 
 	while (*p != '\0') {
-		gchar *decoded_text = NULL;
 		gint len;
 
 		eword_begin_p = strstr(p, ENCODED_WORD_BEGIN);
 		if (!eword_begin_p) {
+                        convert_str(decoded_text, cur_charset, outbuf);
+                        decoded_text = NULL;
 			g_string_append(outbuf, p);
 			break;
 		}
 		encoding_begin_p = strchr(eword_begin_p + 2, '?');
 		if (!encoding_begin_p) {
+                        convert_str(decoded_text, cur_charset, outbuf);
+                        decoded_text = NULL;
 			g_string_append(outbuf, p);
 			break;
 		}
 		text_begin_p = strchr(encoding_begin_p + 1, '?');
 		if (!text_begin_p) {
+                        convert_str(decoded_text, cur_charset, outbuf);
+                        decoded_text = NULL;
 			g_string_append(outbuf, p);
 			break;
 		}
 		eword_end_p = strstr(text_begin_p + 1, ENCODED_WORD_END);
 		if (!eword_end_p) {
+                        convert_str(decoded_text, cur_charset, outbuf);
+                        decoded_text = NULL;
 			g_string_append(outbuf, p);
 			break;
 		}
@@ -82,6 +104,13 @@ gchar *unmime_header(const gchar *encoded_str)
 
 			for (sp = p; sp < eword_begin_p; sp++) {
 				if (!g_ascii_isspace(*sp)) {
+
+                                        convert_str(decoded_text, cur_charset, outbuf);
+                                        decoded_text = NULL;
+                                        decoded_text_len = 0;
+                                        g_free(cur_charset);
+                                        cur_charset = NULL;
+
 					g_string_append_len
 						(outbuf, p, eword_begin_p - p);
 					p = eword_begin_p;
@@ -96,36 +125,50 @@ gchar *unmime_header(const gchar *encoded_str)
 		charset[len] = '\0';
 		encoding = g_ascii_toupper(*(encoding_begin_p + 1));
 
+                if(cur_charset != NULL && strcmp(cur_charset, charset) != 0) {
+                    /* convert previous part */
+                    convert_str(decoded_text, cur_charset, outbuf);
+                    decoded_text = NULL;
+                    decoded_text_len = 0;
+                    g_free(cur_charset);
+                    cur_charset = NULL;
+                }
+
+                if(cur_charset == NULL) {
+                    cur_charset = g_strdup(charset);
+                }
+
 		if (encoding == 'B') {
-			decoded_text = g_malloc
-				(eword_end_p - (text_begin_p + 1) + 1);
-			len = base64_decode((guchar *)decoded_text,
-					    text_begin_p + 1,
-					    eword_end_p - (text_begin_p + 1));
-			decoded_text[len] = '\0';
+			decoded_text = g_realloc
+                                (decoded_text,
+                                 decoded_text_len + eword_end_p - (text_begin_p + 1) + 1);
+			decoded_text_len += base64_decode((guchar *)(decoded_text + decoded_text_len),
+				text_begin_p + 1,
+                                eword_end_p - (text_begin_p + 1));
+			decoded_text[decoded_text_len] = '\0';
 		} else if (encoding == 'Q') {
-			decoded_text = g_malloc
-				(eword_end_p - (text_begin_p + 1) + 1);
-			len = qp_decode_q_encoding
-				((guchar *)decoded_text, text_begin_p + 1,
+			decoded_text = g_realloc
+                                (decoded_text,
+				 decoded_text_len + eword_end_p - (text_begin_p + 1) + 1);
+			decoded_text_len += qp_decode_q_encoding
+                                ((guchar *)(decoded_text  + decoded_text_len), text_begin_p + 1,
 				 eword_end_p - (text_begin_p + 1));
 		} else {
+                        convert_str(decoded_text, cur_charset, outbuf);
+                        decoded_text = NULL;
+                        decoded_text_len = 0;
+                        g_free(cur_charset);
+                        cur_charset = NULL;
 			g_string_append_len(outbuf, p, eword_end_p + 2 - p);
-			p = eword_end_p + 2;
-			continue;
-		}
+                }
 
-		/* convert to UTF-8 */
-		conv_str = conv_codeset_strdup(decoded_text, charset, NULL);
-		if (!conv_str)
-			conv_str = conv_utf8todisp(decoded_text, NULL);
-		g_string_append(outbuf, conv_str);
-		g_free(conv_str);
-
-		g_free(decoded_text);
-
-		p = eword_end_p + 2;
+                p = eword_end_p + 2;
 	}
+        convert_str(decoded_text, cur_charset, outbuf);
+
+        if(cur_charset != NULL) {
+            g_free(cur_charset);
+        }
 
 	out_str = outbuf->str;
 	out_len = outbuf->len;
-- 
2.37.1 (Apple Git-137.1)

