From 54add68aecec4351f1e148241366ccf2d659e784 Mon Sep 17 00:00:00 2001
From: Suyuan Chang <suyuan@cloudmosa.com>
Date: Sun, 27 Jan 2019 22:56:54 -0800
Subject: [PATCH 1/9] quartz-font: Add support for color emoji glyphs.

Treat the macOS system font 'Apple Color Emoji' as color glyphs and
use color surface to render it.

Issue 150
---
 src/cairo-quartz-font.c | 229 ++++++++++++++++++++++++++++++++--------
 1 file changed, 183 insertions(+), 46 deletions(-)

diff --git a/src/cairo-quartz-font.c b/src/cairo-quartz-font.c
index 77a9d6a55..69a3e7547 100644
--- a/src/cairo-quartz-font.c
+++ b/src/cairo-quartz-font.c
@@ -89,6 +89,11 @@ typedef const struct __CTFontDescriptor *CTFontDescriptorRef;
 static CTFontRef (*CTFontCreateWithGraphicsFontPtr) (CGFontRef, CGFloat, const CGAffineTransform*, CTFontDescriptorRef) = NULL;
 static CGPathRef (*CTFontCreatePathForGlyphPtr) (CTFontRef, CGGlyph, CGAffineTransform *) = NULL;
 
+static CFStringRef (*CTFontCopyFamilyNamePtr) (CTFontRef font) = NULL;
+static double (*CTFontGetAdvancesForGlyphsPtr) (CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count) = NULL;
+static CGRect (*CTFontGetBoundingRectsForGlyphsPtr) (CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count) = NULL;
+static void (*CTFontDrawGlyphsPtr) (CTFontRef font, const CGGlyph *glyphs, const CGPoint *positions, size_t count, CGContextRef context) = NULL;
+
 /* CGFontGetHMetrics isn't public, but the other functions are public/present in 10.5 */
 typedef struct {
     int ascent;
@@ -110,6 +115,8 @@ static cairo_bool_t _cairo_quartz_font_symbols_present = FALSE;
 #define CGGLYPH_MAX ((CGGlyph) 0xFFFE) /* kCGFontIndexMax */
 #define CGGLYPH_INVALID ((CGGlyph) 0xFFFF) /* kCGFontIndexInvalid */
 
+#define kCTFontDefaultSize 16.0
+
 static void
 quartz_font_ensure_symbols(void)
 {
@@ -150,6 +157,11 @@ quartz_font_ensure_symbols(void)
     CGContextGetAllowsFontSmoothingPtr = dlsym(RTLD_DEFAULT, "CGContextGetAllowsFontSmoothing");
     CGContextSetAllowsFontSmoothingPtr = dlsym(RTLD_DEFAULT, "CGContextSetAllowsFontSmoothing");
 
+    CTFontCopyFamilyNamePtr = dlsym(RTLD_DEFAULT, "CTFontCopyFamilyName");
+    CTFontGetAdvancesForGlyphsPtr = dlsym(RTLD_DEFAULT, "CTFontGetAdvancesForGlyphs");
+    CTFontGetBoundingRectsForGlyphsPtr = dlsym(RTLD_DEFAULT, "CTFontGetBoundingRectsForGlyphs");
+    CTFontDrawGlyphsPtr = dlsym(RTLD_DEFAULT, "CTFontDrawGlyphs");
+
     FMGetATSFontRefFromFontPtr = dlsym(RTLD_DEFAULT, "FMGetATSFontRefFromFont");
 
     if ((CGFontCreateWithFontNamePtr || CGFontCreateWithNamePtr) &&
@@ -175,6 +187,8 @@ struct _cairo_quartz_font_face {
     cairo_font_face_t base;
 
     CGFontRef cgFont;
+    CTFontRef ctFont;
+    double ctFont_scale;
 };
 
 /*
@@ -259,6 +273,10 @@ _cairo_quartz_font_face_destroy (void *abstract_face)
 {
     cairo_quartz_font_face_t *font_face = (cairo_quartz_font_face_t*) abstract_face;
 
+    if (font_face->ctFont) {
+        CFRelease (font_face->ctFont);
+    }
+
     CGFontRelease (font_face->cgFont);
     return TRUE;
 }
@@ -355,6 +373,16 @@ const cairo_font_face_backend_t _cairo_quartz_font_face_backend = {
     _cairo_quartz_font_face_scaled_font_create
 };
 
+static cairo_bool_t CTFontIsAppleColorEmoji (CTFontRef font)
+{
+    if (!CTFontCopyFamilyNamePtr)
+	return FALSE;
+    CFStringRef name = CTFontCopyFamilyNamePtr (font);
+    CFComparisonResult ret = CFStringCompare (name, CFSTR("Apple Color Emoji"), 0);
+    CFRelease(name);
+    return ret == kCFCompareEqualTo;
+}
+
 /**
  * cairo_quartz_font_face_create_for_cgfont:
  * @font: a #CGFontRef obtained through a method external to cairo.
@@ -383,6 +411,8 @@ cairo_quartz_font_face_create_for_cgfont (CGFontRef font)
     }
 
     font_face->cgFont = CGFontRetain (font);
+    font_face->ctFont = NULL;
+    font_face->ctFont_scale = 1;
 
     _cairo_font_face_init (&font_face->base, &_cairo_quartz_font_face_backend);
 
@@ -413,6 +443,26 @@ _cairo_quartz_scaled_glyph_index (cairo_scaled_glyph_t *scaled_glyph) {
     return index <= CGGLYPH_MAX ? index : CGGLYPH_INVALID;
 }
 
+static void
+_cairo_quartz_prepare_ctfont(cairo_quartz_scaled_font_t *font)
+{
+    cairo_quartz_font_face_t *font_face = _cairo_quartz_scaled_to_face(font);
+    if (!font_face->cgFont)
+        return;
+    if (font_face->ctFont)
+        return;
+
+    if (CTFontCreateWithGraphicsFontPtr) {
+        /* NOTE: CoreText render glyph based on its size. Set font size to the
+           output size in order to get correct result. */
+        double font_scale = _cairo_scaled_font_get_max_scale (&font->base);
+        if (font_scale <= 0)
+            font_scale = kCTFontDefaultSize;
+        font_face->ctFont = CTFontCreateWithGraphicsFontPtr (font_face->cgFont, font_scale, NULL, NULL);
+        font_face->ctFont_scale = font_scale;
+    }
+}
+
 static cairo_int_status_t
 _cairo_quartz_init_glyph_metrics (cairo_quartz_scaled_font_t *font,
 				  cairo_scaled_glyph_t *scaled_glyph)
@@ -422,32 +472,57 @@ _cairo_quartz_init_glyph_metrics (cairo_quartz_scaled_font_t *font,
     cairo_quartz_font_face_t *font_face = _cairo_quartz_scaled_to_face(font);
     cairo_text_extents_t extents = {0, 0, 0, 0, 0, 0};
     CGGlyph glyph = _cairo_quartz_scaled_glyph_index (scaled_glyph);
-    int advance;
+    cairo_bool_t is_color_glyph;
+    CGSize advance;
     CGRect bbox;
-    double emscale = CGFontGetUnitsPerEmPtr (font_face->cgFont);
+    double emscale;
     double xmin, ymin, xmax, ymax;
 
     if (unlikely (glyph == CGGLYPH_INVALID))
 	goto FAIL;
 
-    if (!CGFontGetGlyphAdvancesPtr (font_face->cgFont, &glyph, 1, &advance) ||
-	!CGFontGetGlyphBBoxesPtr (font_face->cgFont, &glyph, 1, &bbox))
-	goto FAIL;
-
-    /* broken fonts like Al Bayan return incorrect bounds for some null characters,
-       see https://bugzilla.mozilla.org/show_bug.cgi?id=534260 */
-    if (unlikely (bbox.origin.x == -32767 &&
-                  bbox.origin.y == -32767 &&
-                  bbox.size.width == 65534 &&
-                  bbox.size.height == 65534)) {
-        bbox.origin.x = bbox.origin.y = 0;
-        bbox.size.width = bbox.size.height = 0;
+    _cairo_quartz_prepare_ctfont(font);
+    is_color_glyph = CTFontIsAppleColorEmoji (font_face->ctFont);
+
+    if (is_color_glyph) {
+	/* Must use CTFontGetBoundingRectsForGlyphs() to get correct bounding box for
+	   Apple Color Emoji font. */
+	CTFontGetAdvancesForGlyphsPtr (font_face->ctFont,
+				       kCTFontOrientationHorizontal,
+				       &glyph, &advance, 1);
+	CTFontGetBoundingRectsForGlyphsPtr (font_face->ctFont,
+					    kCTFontOrientationHorizontal,
+					    &glyph, &bbox, 1);
+        emscale = font_face->ctFont_scale;
+    } else {
+	int int_advance;
+	if (!CGFontGetGlyphAdvancesPtr (font_face->cgFont, &glyph, 1, &int_advance) ||
+	    !CGFontGetGlyphBBoxesPtr (font_face->cgFont, &glyph, 1, &bbox))
+	    goto FAIL;
+
+	emscale = CGFontGetUnitsPerEmPtr (font_face->cgFont);
+
+	advance.width = (double)int_advance;
+	advance.height = 0;
+
+	/* broken fonts like Al Bayan return incorrect bounds for some null characters,
+	   see https://bugzilla.mozilla.org/show_bug.cgi?id=534260 */
+	if (unlikely (bbox.origin.x == -32767 &&
+		      bbox.origin.y == -32767 &&
+		      bbox.size.width == 65534 &&
+		      bbox.size.height == 65534)) {
+	    bbox.origin.x = bbox.origin.y = 0;
+	    bbox.size.width = bbox.size.height = 0;
+	}
     }
 
-    bbox = CGRectMake (bbox.origin.x / emscale,
-		       bbox.origin.y / emscale,
-		       bbox.size.width / emscale,
-		       bbox.size.height / emscale);
+    advance.width /= emscale;
+    advance.height /= emscale;
+
+    bbox.origin.x /= emscale;
+    bbox.origin.y /= emscale;
+    bbox.size.width /= emscale;
+    bbox.size.height /= emscale;
 
     /* Should we want to always integer-align glyph extents, we can do so in this way */
 #if 0
@@ -481,8 +556,8 @@ _cairo_quartz_init_glyph_metrics (cairo_quartz_scaled_font_t *font,
     extents.width = xmax - xmin;
     extents.height = ymax - ymin;
 
-    extents.x_advance = (double) advance / emscale;
-    extents.y_advance = 0.0;
+    extents.x_advance = advance.width;
+    extents.y_advance = advance.height;
 
 #if 0
     fprintf (stderr, "[0x%04x] extents: bearings: %f %f dim: %f %f adv: %f\n\n", glyph,
@@ -574,7 +649,15 @@ _cairo_quartz_init_glyph_path (cairo_quartz_scaled_font_t *font,
 					0, 0);
 
     if (CTFontCreateWithGraphicsFontPtr && CTFontCreatePathForGlyphPtr) {
-	CTFontRef ctFont = CTFontCreateWithGraphicsFontPtr (font_face->cgFont, 1.0, NULL, NULL);
+	/* NOTE: CoreText render glyph based on its size. Set font size to the
+	    output size in order to get correct result. */
+	CTFontRef ctFont;
+	double font_scale = _cairo_scaled_font_get_max_scale (&font->base);
+	if (font_scale <= 0)
+	    font_scale = kCTFontDefaultSize;
+	ctFont = CTFontCreateWithGraphicsFontPtr (font_face->cgFont, font_scale, NULL, NULL);
+	textMatrix = CGAffineTransformConcat (textMatrix,
+	    CGAffineTransformMakeScale (1 / font_scale, 1 / font_scale));
 	glyphPath = CTFontCreatePathForGlyphPtr (ctFont, glyph, &textMatrix);
 	CFRelease (ctFont);
     } else {
@@ -610,17 +693,19 @@ _cairo_quartz_init_glyph_surface (cairo_quartz_scaled_font_t *font,
     cairo_image_surface_t *surface = NULL;
 
     CGGlyph glyph = _cairo_quartz_scaled_glyph_index (scaled_glyph);
-
-    int advance;
-    CGRect bbox;
     double width, height;
-    double emscale = CGFontGetUnitsPerEmPtr (font_face->cgFont);
+    double emscale;
 
     CGContextRef cgContext = NULL;
     CGAffineTransform textMatrix;
     CGRect glyphRect, glyphRectInt;
     CGPoint glyphOrigin;
 
+    cairo_bool_t is_color_glyph;
+
+    _cairo_quartz_prepare_ctfont(font);
+    is_color_glyph = CTFontIsAppleColorEmoji (font_face->ctFont);
+
     //fprintf (stderr, "scaled_glyph: %p surface: %p\n", scaled_glyph, scaled_glyph->surface);
 
     /* Create blank 2x2 image if we don't have this character.
@@ -639,22 +724,28 @@ _cairo_quartz_init_glyph_surface (cairo_quartz_scaled_font_t *font,
 	return CAIRO_STATUS_SUCCESS;
     }
 
-    if (!CGFontGetGlyphAdvancesPtr (font_face->cgFont, &glyph, 1, &advance) ||
-	!CGFontGetGlyphBBoxesPtr (font_face->cgFont, &glyph, 1, &bbox))
-    {
-	return CAIRO_INT_STATUS_UNSUPPORTED;
+    if (is_color_glyph) {
+	CTFontGetBoundingRectsForGlyphsPtr (font_face->ctFont,
+					    kCTFontOrientationHorizontal,
+					    &glyph, &glyphRect, 1);
+	emscale = font_face->ctFont_scale;
+    } else {
+	if (!CGFontGetGlyphBBoxesPtr (font_face->cgFont, &glyph, 1, &glyphRect))
+	    return CAIRO_INT_STATUS_UNSUPPORTED;
+	emscale = CGFontGetUnitsPerEmPtr (font_face->cgFont);
     }
 
+    glyphRect.origin.x /= emscale;
+    glyphRect.origin.y /= emscale;
+    glyphRect.size.width /= emscale;
+    glyphRect.size.height /= emscale;
+
     /* scale(1,-1) * font->base.scale * scale(1,-1) */
     textMatrix = CGAffineTransformMake (font->base.scale.xx,
 					-font->base.scale.yx,
 					-font->base.scale.xy,
 					font->base.scale.yy,
 					0, -0);
-    glyphRect = CGRectMake (bbox.origin.x / emscale,
-			    bbox.origin.y / emscale,
-			    bbox.size.width / emscale,
-			    bbox.size.height / emscale);
 
     glyphRect = CGRectApplyAffineTransform (glyphRect, textMatrix);
 
@@ -679,28 +770,40 @@ _cairo_quartz_init_glyph_surface (cairo_quartz_scaled_font_t *font,
 
     //fprintf (stderr, "glyphRect[n]: %f %f %f %f\n", glyphRect.origin.x, glyphRect.origin.y, glyphRect.size.width, glyphRect.size.height);
 
-    surface = (cairo_image_surface_t*) cairo_image_surface_create (CAIRO_FORMAT_A8, width, height);
+    if (is_color_glyph)
+	surface = (cairo_image_surface_t*) cairo_image_surface_create (CAIRO_FORMAT_ARGB32, width, height);
+    else
+	surface = (cairo_image_surface_t*) cairo_image_surface_create (CAIRO_FORMAT_A8, width, height);
+
     if (surface->base.status)
 	return surface->base.status;
 
     if (surface->width != 0 && surface->height != 0) {
-	cgContext = CGBitmapContextCreate (surface->data,
-					   surface->width,
-					   surface->height,
-					   8,
-					   surface->stride,
-					   NULL,
-					   kCGImageAlphaOnly);
+	if (is_color_glyph) {
+	    CGColorSpaceRef colorSpace = CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);
+	    cgContext = CGBitmapContextCreate (surface->data,
+					       surface->width,
+					       surface->height,
+					       8,
+					       surface->stride,
+					       colorSpace,
+					       kCGImageAlphaPremultipliedFirst | kCGBitmapByteOrder32Little);
+	    CGColorSpaceRelease (colorSpace);
+	} else {
+	    cgContext = CGBitmapContextCreate (surface->data,
+					       surface->width,
+					       surface->height,
+					       8,
+					       surface->stride,
+					       NULL,
+					       kCGImageAlphaOnly);
+	}
 
 	if (cgContext == NULL) {
 	    cairo_surface_destroy (&surface->base);
 	    return _cairo_error (CAIRO_STATUS_NO_MEMORY);
 	}
 
-	CGContextSetFont (cgContext, font_face->cgFont);
-	CGContextSetFontSize (cgContext, 1.0);
-	CGContextSetTextMatrix (cgContext, textMatrix);
-
 	switch (font->base.options.antialias) {
 	case CAIRO_ANTIALIAS_SUBPIXEL:
 	case CAIRO_ANTIALIAS_BEST:
@@ -726,7 +829,24 @@ _cairo_quartz_init_glyph_surface (cairo_quartz_scaled_font_t *font,
 	}
 
 	CGContextSetAlpha (cgContext, 1.0);
-	CGContextShowGlyphsAtPoint (cgContext, - glyphOrigin.x, - glyphOrigin.y, &glyph, 1);
+
+	if (is_color_glyph) {
+	    CGContextSaveGState (cgContext);
+	    // CGContextSetTextMatrix does not work with color glyphs, so we use the
+	    // CTM instead. This means we must translate the CTM as well, to set the
+	    // glyph position, instead of using CGContextSetTextPosition.
+	    CGContextTranslateCTM (cgContext, - glyphOrigin.x, - glyphOrigin.y);
+	    CGContextConcatCTM (cgContext, textMatrix);
+            CGContextConcatCTM (cgContext,
+                CGAffineTransformMakeScale (1 / emscale, 1 / emscale));
+	    CTFontDrawGlyphsPtr (font_face->ctFont, &glyph, &CGPointZero, 1, cgContext);
+	    CGContextRestoreGState (cgContext);
+	} else {
+	    CGContextSetFont (cgContext, font_face->cgFont);
+	    CGContextSetFontSize (cgContext, 1.0);
+	    CGContextSetTextMatrix (cgContext, textMatrix);
+	    CGContextShowGlyphsAtPoint (cgContext, - glyphOrigin.x, - glyphOrigin.y, &glyph, 1);
+	}
 
 	CGContextRelease (cgContext);
     }
@@ -737,6 +857,9 @@ _cairo_quartz_init_glyph_surface (cairo_quartz_scaled_font_t *font,
 
     _cairo_scaled_glyph_set_surface (scaled_glyph, &font->base, surface);
 
+    if (is_color_glyph)
+        _cairo_scaled_glyph_set_color_surface (scaled_glyph, &font->base, surface, FALSE);
+
     return status;
 }
 
@@ -809,6 +932,16 @@ _cairo_quartz_load_truetype_table (void	            *abstract_font,
     return CAIRO_STATUS_SUCCESS;
 }
 
+static cairo_bool_t
+_cairo_quartz_has_color_glyphs (void *scaled)
+{
+    cairo_quartz_scaled_font_t *font = (cairo_quartz_scaled_font_t *)scaled;
+    cairo_quartz_font_face_t *font_face = _cairo_quartz_scaled_to_face(font);
+
+    _cairo_quartz_prepare_ctfont (font);
+    return CTFontIsAppleColorEmoji (font_face->ctFont);
+}
+
 static const cairo_scaled_font_backend_t _cairo_quartz_scaled_font_backend = {
     CAIRO_FONT_TYPE_QUARTZ,
     _cairo_quartz_scaled_font_fini,
@@ -817,6 +950,10 @@ static const cairo_scaled_font_backend_t _cairo_quartz_scaled_font_backend = {
     _cairo_quartz_ucs4_to_index,
     _cairo_quartz_load_truetype_table,
     NULL, /* map_glyphs_to_unicode */
+    NULL, /* is_synthetic */
+    NULL, /* index_to_glyph_name */
+    NULL, /* load_type1_data */
+    _cairo_quartz_has_color_glyphs,
 };
 
 /*
-- 
2.32.1 (Apple Git-133)

